From dd7e8edc3f8e74dbc07eea5905c030ecac3d633b Mon Sep 17 00:00:00 2001
From: Alex Kontos <MrAlex94@users.noreply.github.com>
Date: Sat, 19 Jan 2019 13:19:40 +0000
Subject: [PATCH] Revert "Merge pull request #843 from
 bilgincoskun/sortable_path"

This reverts commit dc34676fc085354b468f519ffffec03df017761b.
---
 browser/components/places/content/places.xul  |  7 --
 browser/components/places/content/treeView.js | 30 ------
 .../en-US/chrome/browser/places/places.dtd    |  2 -
 .../places/nsINavHistoryService.idl           | 13 +--
 toolkit/components/places/nsNavBookmarks.cpp  | 12 +--
 toolkit/components/places/nsNavHistory.cpp    | 96 +++++--------------
 toolkit/components/places/nsNavHistory.h      |  3 +-
 .../components/places/nsNavHistoryResult.cpp  | 85 ----------------
 .../components/places/nsNavHistoryResult.h    | 26 +----
 9 files changed, 32 insertions(+), 242 deletions(-)

diff --git a/browser/components/places/content/places.xul b/browser/components/places/content/places.xul
index 70b2ab85cbe4..24e18b607a0b 100644
--- a/browser/components/places/content/places.xul
+++ b/browser/components/places/content/places.xul
@@ -396,13 +396,6 @@
             <splitter class="tree-splitter"/>
             <treecol label="&col.lastmodified.label;" id="placesContentLastModified" anonid="lastModified" flex="1" hidden="true"
                       persist="width hidden ordinal sortActive sortDirection"/>
-            <splitter class="tree-splitter"/>
-            <treecol label="&col.parentfolder.label;" id="placesContentParentFolder" anonid="parentFolder" flex="1" hidden="true"
-                      persist="width hidden ordinal sortActive sortDirection"/>
-            <splitter class="tree-splitter"/>
-            <treecol label="&col.parentpath.label;" id="placesContentParentPath" anonid="parentPath" flex="1" hidden="true"
-                      persist="width hidden ordinal sortActive sortDirection"/>
-
           </treecols>
           <treechildren flex="1" onclick="ContentTree.onClick(event);"/>
         </tree>
diff --git a/browser/components/places/content/treeView.js b/browser/components/places/content/treeView.js
index 28dd6b142609..29379ea125a1 100644
--- a/browser/components/places/content/treeView.js
+++ b/browser/components/places/content/treeView.js
@@ -582,8 +582,6 @@ PlacesTreeView.prototype = {
   COLUMN_TYPE_DATEADDED: 6,
   COLUMN_TYPE_LASTMODIFIED: 7,
   COLUMN_TYPE_TAGS: 8,
-  COLUMN_TYPE_PARENTFOLDER: 9,
-  COLUMN_TYPE_PARENTPATH: 10,
 
   _getColumnType: function PTV__getColumnType(aColumn) {
     let columnType = aColumn.element.getAttribute("anonid") || aColumn.id;
@@ -605,10 +603,6 @@ PlacesTreeView.prototype = {
         return this.COLUMN_TYPE_LASTMODIFIED;
       case "tags":
         return this.COLUMN_TYPE_TAGS;
-      case "parentFolder":
-        return this.COLUMN_TYPE_PARENTFOLDER;
-      case "parentPath":
-        return this.COLUMN_TYPE_PARENTPATH;
     }
     return this.COLUMN_TYPE_UNKNOWN;
   },
@@ -1561,10 +1555,6 @@ PlacesTreeView.prototype = {
         if (node.lastModified)
           return this._convertPRTimeToString(node.lastModified);
         return "";
-      case this.COLUMN_TYPE_PARENTFOLDER:
-        return node.parentFolder
-      case this.COLUMN_TYPE_PARENTPATH:
-        return node.parentPath
     }
     return "";
   },
@@ -1727,26 +1717,6 @@ PlacesTreeView.prototype = {
           newSort = NHQO.SORT_BY_TAGS_ASCENDING;
 
         break;
-      case this.COLUMN_TYPE_PARENTFOLDER:
-        if (oldSort == NHQO.SORT_BY_PARENTFOLDER_ASCENDING)
-          newSort = NHQO.SORT_BY_PARENTFOLDER_DESCENDING;
-        else if (allowTriState && oldSort == NHQO.SORT_BY_PARENTFOLDER_DESCENDING)
-          newSort = NHQO.SORT_BY_NONE;
-        else
-          newSort = NHQO.SORT_BY_PARENTFOLDER_ASCENDING;
-
-        break;
-      case this.COLUMN_TYPE_PARENTPATH:
-        if (oldSort == NHQO.SORT_BY_PARENTPATH_ASCENDING)
-          newSort = NHQO.SORT_BY_PARENTPATH_DESCENDING;
-        else if (allowTriState && oldSort == NHQO.SORT_BY_PARENTPATH_DESCENDING)
-          newSort = NHQO.SORT_BY_NONE;
-        else
-          newSort = NHQO.SORT_BY_PARENTPATH_ASCENDING;
-
-        break;
-
-
       default:
         throw Cr.NS_ERROR_INVALID_ARG;
     }
diff --git a/browser/locales/en-US/chrome/browser/places/places.dtd b/browser/locales/en-US/chrome/browser/places/places.dtd
index b93cae9cd90b..8b0c780b1350 100644
--- a/browser/locales/en-US/chrome/browser/places/places.dtd
+++ b/browser/locales/en-US/chrome/browser/places/places.dtd
@@ -84,8 +84,6 @@
 <!ENTITY col.description.label   "Description">
 <!ENTITY col.dateadded.label     "Added">
 <!ENTITY col.lastmodified.label  "Last Modified">
-<!ENTITY col.parentfolder.label  "Parent Folder">
-<!ENTITY col.parentpath.label  "Parent Path">
 
 <!ENTITY search.placeholder  "Search">
 
diff --git a/toolkit/components/places/nsINavHistoryService.idl b/toolkit/components/places/nsINavHistoryService.idl
index 1abf4f3e917a..66b1cd9858a1 100644
--- a/toolkit/components/places/nsINavHistoryService.idl
+++ b/toolkit/components/places/nsINavHistoryService.idl
@@ -186,11 +186,6 @@ interface nsINavHistoryResultNode : nsISupports
    * history visit nodes, this value is 0.
    */
   readonly attribute unsigned long visitType;
-
-  readonly attribute AUTF8String parentFolder;
-
-  readonly attribute AUTF8String parentPath;
-
 };
 
 
@@ -1023,12 +1018,8 @@ interface nsINavHistoryQueryOptions : nsISupports
   const unsigned short SORT_BY_TAGS_DESCENDING = 18;
   const unsigned short SORT_BY_ANNOTATION_ASCENDING = 19;
   const unsigned short SORT_BY_ANNOTATION_DESCENDING = 20;
-  const unsigned short SORT_BY_PARENTFOLDER_ASCENDING = 21;
-  const unsigned short SORT_BY_PARENTFOLDER_DESCENDING = 22;
-  const unsigned short SORT_BY_PARENTPATH_ASCENDING = 23;
-  const unsigned short SORT_BY_PARENTPATH_DESCENDING = 24;
-  const unsigned short SORT_BY_FRECENCY_ASCENDING = 25;
-  const unsigned short SORT_BY_FRECENCY_DESCENDING = 26;
+  const unsigned short SORT_BY_FRECENCY_ASCENDING = 21;
+  const unsigned short SORT_BY_FRECENCY_DESCENDING = 22;
 
   /**
    * "URI" results, one for each URI visited in the range. Individual result
diff --git a/toolkit/components/places/nsNavBookmarks.cpp b/toolkit/components/places/nsNavBookmarks.cpp
index ca161891b25d..1dd9f6cd0915 100644
--- a/toolkit/components/places/nsNavBookmarks.cpp
+++ b/toolkit/components/places/nsNavBookmarks.cpp
@@ -22,11 +22,11 @@
 using namespace mozilla;
 
 // These columns sit to the right of the kGetInfoIndex_* columns.
-const int32_t nsNavBookmarks::kGetChildrenIndex_Guid = 20;
-const int32_t nsNavBookmarks::kGetChildrenIndex_Position = 21;
-const int32_t nsNavBookmarks::kGetChildrenIndex_Type = 22;
-const int32_t nsNavBookmarks::kGetChildrenIndex_PlaceID = 23;
-const int32_t nsNavBookmarks::kGetChildrenIndex_SyncStatus = 24;
+const int32_t nsNavBookmarks::kGetChildrenIndex_Guid = 18;
+const int32_t nsNavBookmarks::kGetChildrenIndex_Position = 19;
+const int32_t nsNavBookmarks::kGetChildrenIndex_Type = 20;
+const int32_t nsNavBookmarks::kGetChildrenIndex_PlaceID = 21;
+const int32_t nsNavBookmarks::kGetChildrenIndex_SyncStatus = 22;
 
 using namespace mozilla::places;
 
@@ -1126,7 +1126,6 @@ nsNavBookmarks::GetDescendantChildren(int64_t aFolderId,
       "SELECT h.id, h.url, b.title, h.rev_host, h.visit_count, "
              "h.last_visit_date, null, b.id, b.dateAdded, b.lastModified, "
              "b.parent, null, h.frecency, h.hidden, h.guid, null, null, null, "
-             "null, null, "
              "b.guid, b.position, b.type, b.fk, b.syncStatus "
       "FROM moz_bookmarks b "
       "LEFT JOIN moz_places h ON b.fk = h.id "
@@ -2173,7 +2172,6 @@ nsNavBookmarks::QueryFolderChildren(
     "SELECT h.id, h.url, b.title, h.rev_host, h.visit_count, "
            "h.last_visit_date, null, b.id, b.dateAdded, b.lastModified, "
            "b.parent, null, h.frecency, h.hidden, h.guid, null, null, null, "
-           "null, null, "
            "b.guid, b.position, b.type, b.fk "
     "FROM moz_bookmarks b "
     "LEFT JOIN moz_places h ON b.fk = h.id "
diff --git a/toolkit/components/places/nsNavHistory.cpp b/toolkit/components/places/nsNavHistory.cpp
index e6138d8588a3..429b07087753 100644
--- a/toolkit/components/places/nsNavHistory.cpp
+++ b/toolkit/components/places/nsNavHistory.cpp
@@ -218,17 +218,6 @@ void GetTagsSqlFragment(int64_t aTagsFolder,
 
   _sqlFragment.AppendLiteral(" AS tags ");
 }
-#define PathQuerySql(tagsFolder)  ( NS_LITERAL_CSTRING(" \
-     with recursive folder_path(id,title) as \
-	(select m.id, m.title from moz_bookmarks m \
-	where m.parent is 0 \
-	union \
-	select m.id, p.title || '/' || m.title \
-		from moz_bookmarks as m,folder_path as p \
-		where m.parent = p.id and m.type is 2 and m.id <> ") \
-                + nsPrintfCString("%" PRId64, tagsFolder) + NS_LITERAL_CSTRING(" \
-	) \
-        ") )
 
 /**
  * This class sets begin/end of batch updates to correspond to C++ scopes so
@@ -272,14 +261,12 @@ const int32_t nsNavHistory::kGetInfoIndex_Guid = 14;
 const int32_t nsNavHistory::kGetInfoIndex_VisitId = 15;
 const int32_t nsNavHistory::kGetInfoIndex_FromVisitId = 16;
 const int32_t nsNavHistory::kGetInfoIndex_VisitType = 17;
-const int32_t nsNavHistory::kGetInfoIndex_ParentFolder = 18;
-const int32_t nsNavHistory::kGetInfoIndex_ParentPath = 19;
 // These columns are followed by corresponding constants in nsNavBookmarks.cpp,
 // which must be kept in sync:
-// nsNavBookmarks::kGetChildrenIndex_Guid = 20;
-// nsNavBookmarks::kGetChildrenIndex_Position = 21;
-// nsNavBookmarks::kGetChildrenIndex_Type = 22;
-// nsNavBookmarks::kGetChildrenIndex_PlaceID = 23;
+// nsNavBookmarks::kGetChildrenIndex_Guid = 18;
+// nsNavBookmarks::kGetChildrenIndex_Position = 19;
+// nsNavBookmarks::kGetChildrenIndex_Type = 20;
+// nsNavBookmarks::kGetChildrenIndex_PlaceID = 21;
 
 PLACES_FACTORY_SINGLETON_IMPLEMENTATION(nsNavHistory, gHistoryService)
 
@@ -1530,8 +1517,7 @@ PlacesSQLQueryBuilder::SelectAsURI()
         "SELECT h.id, h.url, h.title AS page_title, h.rev_host, h.visit_count, "
         "h.last_visit_date, null, null, null, null, null, ") +
         tagsSqlFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-        "null, null, null, "
-        "null,null " 
+        "null, null, null "
         "FROM moz_places h "
         // WHERE 1 is a no-op since additonal conditions will start with AND.
         "WHERE 1 "
@@ -1552,15 +1538,12 @@ PlacesSQLQueryBuilder::SelectAsURI()
                            mHasSearchTerms,
                            tagsSqlFragment);
 
-        mQueryString = PathQuerySql(history->GetTagsFolder()) +
-          NS_LITERAL_CSTRING(
+        mQueryString = NS_LITERAL_CSTRING(
           "SELECT b2.fk, h.url, b2.title AS page_title, "
             "h.rev_host, h.visit_count, h.last_visit_date, null, b2.id, "
             "b2.dateAdded, b2.lastModified, b2.parent, ") +
             tagsSqlFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-                "null, null, null, "
-                "null, null "
-                ",b2.guid, b2.position, b2.type, b2.fk "
+            "null, null, null, b2.guid, b2.position, b2.type, b2.fk "
           "FROM moz_bookmarks b2 "
           "JOIN (SELECT b.fk "
                 "FROM moz_bookmarks b "
@@ -1579,17 +1562,15 @@ PlacesSQLQueryBuilder::SelectAsURI()
                            NS_LITERAL_CSTRING("b.fk"),
                            mHasSearchTerms,
                            tagsSqlFragment);
-        mQueryString = PathQuerySql(history->GetTagsFolder()) + NS_LITERAL_CSTRING(
+        mQueryString = NS_LITERAL_CSTRING(
           "SELECT b.fk, h.url, b.title AS page_title, "
             "h.rev_host, h.visit_count, h.last_visit_date, null, b.id, "
             "b.dateAdded, b.lastModified, b.parent, ") +
             tagsSqlFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid,"
-                "null, null, null, "
-                "f.title, p.title "
-                ",b.guid, b.position, b.type, b.fk "
-          "FROM moz_bookmarks f, moz_bookmarks b, folder_path p "
+            "null, null, null, b.guid, b.position, b.type, b.fk "
+          "FROM moz_bookmarks b "
           "JOIN moz_places h ON b.fk = h.id "
-          "WHERE f.id = b.parent AND f.id = p.id AND NOT EXISTS "
+          "WHERE NOT EXISTS "
               "(SELECT id FROM moz_bookmarks "
                 "WHERE id = b.parent AND parent = ") +
                   nsPrintfCString("%" PRId64, history->GetTagsFolder()) +
@@ -1618,8 +1599,7 @@ PlacesSQLQueryBuilder::SelectAsVisit()
     "SELECT h.id, h.url, h.title AS page_title, h.rev_host, h.visit_count, "
       "v.visit_date, null, null, null, null, null, ") +
       tagsSqlFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-      "v.id, v.from_visit, v.visit_type, "
-      "null, null "
+      "v.id, v.from_visit, v.visit_type "
     "FROM moz_places h "
     "JOIN moz_historyvisits v ON h.id = v.place_id "
     // WHERE 1 is a no-op since additonal conditions will start with AND.
@@ -1654,8 +1634,7 @@ PlacesSQLQueryBuilder::SelectAsDay()
      "SELECT null, "
        "'place:type=%d&sort=%d&beginTime='||beginTime||'&endTime='||endTime, "
       "dayTitle, null, null, beginTime, null, null, null, null, null, null, "
-      "null, null, null, "
-      "null, null "
+      "null, null, null "
      "FROM (", // TOUTER BEGIN
      resultType,
      sortingMode);
@@ -1858,8 +1837,7 @@ PlacesSQLQueryBuilder::SelectAsSite()
   mQueryString = nsPrintfCString(
     "SELECT null, 'place:type=%d&sort=%d&domain=&domainIsHost=true'%s, "
            ":localhost, :localhost, null, null, null, null, null, null, null, "
-           "null, null, null, "
-           "null, null "
+           "null, null, null "
     "WHERE EXISTS ( "
       "SELECT h.id FROM moz_places h "
       "%s "
@@ -1874,8 +1852,7 @@ PlacesSQLQueryBuilder::SelectAsSite()
     "SELECT null, "
            "'place:type=%d&sort=%d&domain='||host||'&domainIsHost=true'%s, "
            "host, host, null, null, null, null, null, null, null, "
-           "null, null, null, "
-           "null, null "
+           "null, null, null "
     "FROM ( "
       "SELECT get_unreversed_host(h.rev_host) AS host "
       "FROM moz_places h "
@@ -1915,8 +1892,7 @@ PlacesSQLQueryBuilder::SelectAsTag()
   mQueryString = nsPrintfCString(
     "SELECT null, 'place:folder=' || id || '&queryType=%d&type=%d', "
            "title, null, null, null, null, null, dateAdded, "
-           "lastModified, null, null, null, null, null, null, "
-           "null, null "
+           "lastModified, null, null, null, null, null, null "
     "FROM moz_bookmarks "
     "WHERE parent = %" PRId64,
     nsINavHistoryQueryOptions::QUERY_TYPE_BOOKMARKS,
@@ -2064,18 +2040,6 @@ PlacesSQLQueryBuilder::OrderBy()
     case nsINavHistoryQueryOptions::SORT_BY_ANNOTATION_ASCENDING:
     case nsINavHistoryQueryOptions::SORT_BY_ANNOTATION_DESCENDING:
       break; // Sort later in nsNavHistoryQueryResultNode::FillChildren()
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTFOLDER_ASCENDING:
-        OrderByColumnIndexAsc(nsNavHistory::kGetInfoIndex_ParentFolder);
-      break;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTFOLDER_DESCENDING:
-        OrderByColumnIndexDesc(nsNavHistory::kGetInfoIndex_ParentFolder);
-      break;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTPATH_ASCENDING:
-        OrderByColumnIndexAsc(nsNavHistory::kGetInfoIndex_ParentPath);
-      break;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTPATH_DESCENDING:
-        OrderByColumnIndexDesc(nsNavHistory::kGetInfoIndex_ParentPath);
-      break;
     case nsINavHistoryQueryOptions::SORT_BY_FRECENCY_ASCENDING:
         OrderByColumnIndexAsc(nsNavHistory::kGetInfoIndex_Frecency);
       break;
@@ -2163,8 +2127,7 @@ nsNavHistory::ConstructQueryString(
       "SELECT h.id, h.url, h.title AS page_title, h.rev_host, h.visit_count, h.last_visit_date, "
           "null, null, null, null, null, ") +
           tagsSqlFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-          "null, null, null, "
-           "null, null "
+          "null, null, null "
         "FROM moz_places h "
         "WHERE h.hidden = 0 "
           "AND EXISTS (SELECT id FROM moz_historyvisits WHERE place_id = h.id "
@@ -3870,9 +3833,6 @@ nsNavHistory::RowToResult(mozIStorageValueArray* aRow,
   // itemId
   int64_t itemId = aRow->AsInt64(kGetInfoIndex_ItemId);
   int64_t parentId = -1;
-  nsAutoCString parentFolder,parentPath;
-  parentFolder = "";
-  parentPath = "";
   if (itemId == 0) {
     // This is not a bookmark.  For non-bookmarks we use a -1 itemId value.
     // Notice ids in sqlite tables start from 1, so itemId cannot ever be 0.
@@ -3885,10 +3845,6 @@ nsNavHistory::RowToResult(mozIStorageValueArray* aRow,
       // The Places root has parent == 0, but that item id does not really
       // exist. We want to set the parent only if it's a real one.
       parentId = itemParentId;
-      rv = aRow->GetUTF8String(kGetInfoIndex_ParentFolder, parentFolder);
-      NS_ENSURE_SUCCESS(rv, rv);
-      rv = aRow->GetUTF8String(kGetInfoIndex_ParentPath, parentPath);
-      NS_ENSURE_SUCCESS(rv, rv);
     }
   }
 
@@ -3941,8 +3897,6 @@ nsNavHistory::RowToResult(mozIStorageValueArray* aRow,
     if (itemId != -1) {
       resultNode->mItemId = itemId;
       resultNode->mFolderId = parentId;
-      resultNode->mParentFolder = parentFolder;
-      resultNode->mParentPath = parentPath;
       resultNode->mDateAdded = aRow->AsInt64(kGetInfoIndex_ItemDateAdded);
       resultNode->mLastModified = aRow->AsInt64(kGetInfoIndex_ItemLastModified);
 
@@ -4103,8 +4057,7 @@ nsNavHistory::VisitIdToResultNode(int64_t visitId,
         "SELECT h.id, h.url, h.title, h.rev_host, h.visit_count, "
                "v.visit_date, null, null, null, null, null, "
                ) + tagsFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-              "v.id, v.from_visit, v.visit_type, "
-              "null, null "
+              "v.id, v.from_visit, v.visit_type "
         "FROM moz_places h "
         "JOIN moz_historyvisits v ON h.id = v.place_id "
         "WHERE v.id = :visit_id ")
@@ -4118,8 +4071,7 @@ nsNavHistory::VisitIdToResultNode(int64_t visitId,
         "SELECT h.id, h.url, h.title, h.rev_host, h.visit_count, "
                "h.last_visit_date, null, null, null, null, null, "
                ) + tagsFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-              "null, null, null, "
-              "null, null "
+              "null, null, null "
         "FROM moz_places h "
         "JOIN moz_historyvisits v ON h.id = v.place_id "
         "WHERE v.id = :visit_id ")
@@ -4160,17 +4112,15 @@ nsNavHistory::BookmarkIdToResultNode(int64_t aBookmarkId, nsNavHistoryQueryOptio
   GetTagsSqlFragment(GetTagsFolder(), NS_LITERAL_CSTRING("h.id"),
                      true, tagsFragment);
   // Should match kGetInfoIndex_*
-  nsCOMPtr<mozIStorageStatement> stmt = mDB->GetStatement( PathQuerySql(GetTagsFolder()) + NS_LITERAL_CSTRING(
+  nsCOMPtr<mozIStorageStatement> stmt = mDB->GetStatement(NS_LITERAL_CSTRING(
       "SELECT b.fk, h.url, b.title, "
              "h.rev_host, h.visit_count, h.last_visit_date, null, b.id, "
              "b.dateAdded, b.lastModified, b.parent, "
              ) + tagsFragment + NS_LITERAL_CSTRING(", h.frecency, h.hidden, h.guid, "
-               "null, null, null, "
-               "f.title, p.title "
-               ",b.guid, b.position, b.type, b.fk "
-      "FROM moz_bookmarks f, moz_bookmarks b, folder_path p "
+             "null, null, null, b.guid, b.position, b.type, b.fk "
+      "FROM moz_bookmarks b "
       "JOIN moz_places h ON b.fk = h.id "
-      "WHERE b.id = :item_id AND f.id = b.parent AND f.id = p.id")
+      "WHERE b.id = :item_id ")
   );
   NS_ENSURE_STATE(stmt);
   mozStorageStatementScoper scoper(stmt);
diff --git a/toolkit/components/places/nsNavHistory.h b/toolkit/components/places/nsNavHistory.h
index ffe4ac6b7c2c..d5adda8443d6 100644
--- a/toolkit/components/places/nsNavHistory.h
+++ b/toolkit/components/places/nsNavHistory.h
@@ -238,8 +238,7 @@ public:
   static const int32_t kGetInfoIndex_VisitId;
   static const int32_t kGetInfoIndex_FromVisitId;
   static const int32_t kGetInfoIndex_VisitType;
-  static const int32_t kGetInfoIndex_ParentFolder;
-  static const int32_t kGetInfoIndex_ParentPath;
+
   int64_t GetTagsFolder();
 
   // this actually executes a query and gives you results, it is used by
diff --git a/toolkit/components/places/nsNavHistoryResult.cpp b/toolkit/components/places/nsNavHistoryResult.cpp
index 9b5a8b702ba6..e523460dc502 100644
--- a/toolkit/components/places/nsNavHistoryResult.cpp
+++ b/toolkit/components/places/nsNavHistoryResult.cpp
@@ -108,8 +108,6 @@ nsNavHistoryResultNode::nsNavHistoryResultNode(
   mTransitionType(0)
 {
   mTags.SetIsVoid(true);
-  mParentFolder.SetIsVoid(true);
-  mParentPath.SetIsVoid(true);
 }
 
 
@@ -261,16 +259,6 @@ nsNavHistoryResultNode::GetVisitType(uint32_t* aVisitType) {
   return NS_OK;
 }
 
-NS_IMETHODIMP
-nsNavHistoryResultNode::GetParentFolder(nsACString& aParentFolder){
-  aParentFolder = mParentFolder;
-  return NS_OK; }
-
-NS_IMETHODIMP
-nsNavHistoryResultNode::GetParentPath(nsACString& aParentPath){
-  aParentPath = mParentPath;
-  return NS_OK; }
-
 
 void
 nsNavHistoryResultNode::OnRemoving()
@@ -791,14 +779,6 @@ nsNavHistoryContainerResultNode::GetSortingComparator(uint16_t aSortType)
       return &SortComparison_TagsLess;
     case nsINavHistoryQueryOptions::SORT_BY_TAGS_DESCENDING:
       return &SortComparison_TagsGreater;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTFOLDER_ASCENDING:
-      return &SortComparison_ParentFolderLess;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTFOLDER_DESCENDING:
-      return &SortComparison_ParentFolderGreater;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTPATH_ASCENDING:
-      return &SortComparison_ParentPathLess;
-    case nsINavHistoryQueryOptions::SORT_BY_PARENTPATH_DESCENDING:
-      return &SortComparison_ParentPathGreater;
     case nsINavHistoryQueryOptions::SORT_BY_FRECENCY_ASCENDING:
       return &SortComparison_FrecencyLess;
     case nsINavHistoryQueryOptions::SORT_BY_FRECENCY_DESCENDING:
@@ -1318,71 +1298,6 @@ nsNavHistoryContainerResultNode::SortComparison_FrecencyGreater(
   return -nsNavHistoryContainerResultNode::SortComparison_FrecencyLess(a, b, closure);
 }
 
-int32_t nsNavHistoryContainerResultNode::SortComparison_ParentFolderLess(
-    nsNavHistoryResultNode* a, nsNavHistoryResultNode* b, void* closure)
-{
-  uint32_t aType;
-  a->GetType(&aType);
-
-  int32_t value = SortComparison_StringLess(NS_ConvertUTF8toUTF16(a->mParentFolder),
-                                            NS_ConvertUTF8toUTF16(b->mParentFolder));
-  if (value == 0) {
-    //Compare Folder IDs
-    value = CompareIntegers(a->mFolderId,b->mFolderId);
-    if (value == 0){
-      // resolve by URI
-      if (a->IsURI()) {
-        value = a->mURI.Compare(b->mURI.get());
-      }
-      if (value == 0) {
-        // resolve by date
-        value = ComparePRTime(a->mTime, b->mTime);
-        if (value == 0)
-          value = nsNavHistoryContainerResultNode::SortComparison_Bookmark(a, b, closure);
-      }
-    }
-  }
-  return value;
-}
-int32_t nsNavHistoryContainerResultNode::SortComparison_ParentFolderGreater(
-    nsNavHistoryResultNode* a, nsNavHistoryResultNode* b, void* closure)
-{
-  return -SortComparison_ParentFolderLess(a, b, closure);
-}
-
-int32_t nsNavHistoryContainerResultNode::SortComparison_ParentPathLess(
-    nsNavHistoryResultNode* a, nsNavHistoryResultNode* b, void* closure)
-{
-  uint32_t aType;
-  a->GetType(&aType);
-
-  int32_t value = SortComparison_StringLess(NS_ConvertUTF8toUTF16(a->mParentPath),
-                                            NS_ConvertUTF8toUTF16(b->mParentPath));
-  if (value == 0) {
-    //Compare Folder IDs
-    value = CompareIntegers(a->mFolderId,b->mFolderId);
-    if (value == 0){
-      // resolve by URI
-      if (a->IsURI()) {
-        value = a->mURI.Compare(b->mURI.get());
-      }
-      if (value == 0) {
-        // resolve by date
-        value = ComparePRTime(a->mTime, b->mTime);
-        if (value == 0)
-          value = nsNavHistoryContainerResultNode::SortComparison_Bookmark(a, b, closure);
-      }
-    }
-  }
-  return value;
-}
-
-int32_t nsNavHistoryContainerResultNode::SortComparison_ParentPathGreater(
-    nsNavHistoryResultNode* a, nsNavHistoryResultNode* b, void* closure)
-{
-  return -SortComparison_ParentPathLess(a, b, closure);
-}
-
 /**
  * Searches this folder for a node with the given URI.  Returns null if not
  * found.
diff --git a/toolkit/components/places/nsNavHistoryResult.h b/toolkit/components/places/nsNavHistoryResult.h
index a1920412026e..676c9b07ac72 100644
--- a/toolkit/components/places/nsNavHistoryResult.h
+++ b/toolkit/components/places/nsNavHistoryResult.h
@@ -251,11 +251,7 @@ NS_DEFINE_STATIC_IID_ACCESSOR(nsNavHistoryResult, NS_NAVHISTORYRESULT_IID)
   NS_IMETHOD GetFromVisitId(int64_t* aFromVisitId) override \
     { return nsNavHistoryResultNode::GetFromVisitId(aFromVisitId); } \
   NS_IMETHOD GetVisitType(uint32_t* aVisitType) override \
-    { return nsNavHistoryResultNode::GetVisitType(aVisitType); } \
-  NS_IMETHOD GetParentFolder(nsACString& aParentFolder) override \
-    { return nsNavHistoryResultNode::GetParentFolder(aParentFolder); } \
-  NS_IMETHOD GetParentPath(nsACString& aParentPath) override \
-    { return nsNavHistoryResultNode::GetParentPath(aParentPath); } 
+    { return nsNavHistoryResultNode::GetVisitType(aVisitType); }
 
 class nsNavHistoryResultNode : public nsINavHistoryResultNode
 {
@@ -282,8 +278,6 @@ public:
   NS_IMETHOD GetVisitId(int64_t* aVisitId) override;
   NS_IMETHOD GetFromVisitId(int64_t* aFromVisitId) override;
   NS_IMETHOD GetVisitType(uint32_t* aVisitType) override;
-  NS_IMETHOD GetParentFolder(nsACString& aParentFolder) override;
-  NS_IMETHOD GetParentPath(nsACString& aParentPath) override;
 
   virtual void OnRemoving();
 
@@ -379,8 +373,6 @@ public:
   int64_t mFromVisitId;
   PRTime mDateAdded;
   PRTime mLastModified;
-  nsCString mParentFolder;
-  nsCString mParentPath;
 
   // The indent level of this node. The root node will have a value of -1.  The
   // root's children will have a value of 0, and so on.
@@ -568,22 +560,6 @@ public:
                                                 nsNavHistoryResultNode* b,
                                                 void* closure);
 
-  static int32_t SortComparison_ParentFolderLess(nsNavHistoryResultNode* a,
-                                             nsNavHistoryResultNode* b,
-                                             void* closure);
-  static int32_t SortComparison_ParentFolderGreater(nsNavHistoryResultNode* a,
-                                                nsNavHistoryResultNode* b,
-                                                void* closure);
-
-  static int32_t SortComparison_ParentPathLess(nsNavHistoryResultNode* a,
-                                             nsNavHistoryResultNode* b,
-                                             void* closure);
-  static int32_t SortComparison_ParentPathGreater(nsNavHistoryResultNode* a,
-                                                nsNavHistoryResultNode* b,
-                                                void* closure);
-
-
-
   // finding children: THESE DO NOT ADDREF
   nsNavHistoryResultNode* FindChildURI(const nsACString& aSpec,
                                        uint32_t* aNodeIndex);
-- 
2.20.1

